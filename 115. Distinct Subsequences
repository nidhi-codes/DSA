class Solution {
public:
    int dp[1001][1001];
    // void solve(string s, string t, string& ans, int i, int& count){

    //     if(i>=s.length()){
    //         if(t == ans){
    //             count++;
    //         }
    //         return;
    //     }

    //     ans += s[i];
    //     solve(s, t, ans, i+1, count);
    //     ans.pop_back();
    //     solve(s, t, ans, i+1, count);

    // }

    int solve(string s, string t, int i, int j){

        if(j < 0){
            return 1;
        }

        if(i < 0){
            return 0;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        if(s[i] == t[j]){
            dp[i][j] = solve(s, t, i-1, j-1)+solve(s, t, i-1, j);
            return dp[i][j];
        }

        else{
            dp[i][j] = solve(s, t, i-1, j);
            return dp[i][j];
        }
    }
    int numDistinct(string s, string t) {
        // string ans;
        // int count =0;
        // solve(s, t, ans, 0, count);
        // return count;

        memset(dp, -1, sizeof(dp));
        int i=s.size()-1;
        int j=t.size()-1;

        return solve(s, t, i, j);
    }
};
