class Solution {
public:

    int dfs(vector<vector<int>>& matrix, int i, int j, int r, int c, vector<vector<int>>& memo){

        if(i == r-1){
            return matrix[i][j];
        }

        if(j<0 || j>=c){
            return INT_MAX;
        }

        if(memo[i][j] != INT_MAX){
            return memo[i][j];
        }
        
        int curr = matrix[i][j];
        int minNextPathSum = INT_MAX;
        for(int k=0; k<r; k++){
            if(k != j){
                minNextPathSum = min(minNextPathSum, dfs(matrix, i+1, k, r, c, memo));
            }
        }
        
        memo[i][j] = curr + minNextPathSum;
        return memo[i][j];

    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int r = matrix.size();
        int c = matrix[0].size();

        vector<vector<int>> memo(r, vector<int>(c, INT_MAX));
        int ans = INT_MAX;

        for(int j=0; j<c; j++){
            ans = min(ans, dfs(matrix, 0, j, r, c, memo));
        }
        return ans;
    }
};
