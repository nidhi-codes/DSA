class Solution {
public:
    long long continuousSubarrays(vector<int>& nums) {
        map<int,int> mp;
        int i=0,j=0,n=nums.size();
        long long ans=0;
        bool ch=true;
        // mp[nums[0]]++;
        while(j<n){
            int lo=0,hi=0;
            while(j<n ){
                mp[nums[j]]++;
                auto it1=mp.begin(),it2=mp.end();
                it2--;
                lo=it1->first,hi=it2->first;
                // cout<<i<<" "<<j<<endl<<lo<<" "<<hi<<endl;
                if(hi-lo<=2){
                int temp=j-i+1;
                // if(lo!=0 and hi!=0)
                ans+=temp;
                j++;}
                else break;
            }
            // cout<<i<<" "<<j<<" "<<ans<<endl;
            // cout<<endl;
            // cout<<endl;
            // for(auto p:mp)cout<<p.first<<" "<<p.second<<endl;
            // cout<<endl;
            while(i<j and hi-lo>2){
                mp[nums[i]]--;
                // cout<<nums[i]<<" "<<mp[nums[i]]<<endl;
                if(mp[nums[i]]==0){
                    // cout<<nums[i]<<"- ";
                    mp.erase(nums[i]);}
                auto it1=mp.begin(),it2=mp.end();
                it2--;
                lo=it1->first,hi=it2->first;
                i++;
            }
            // cout<<endl;
            // for(auto p:mp)cout<<p.first<<" "<<p.second<<endl;
            // cout<<endl;
            // cout<<endl;
            if(j<n){
            int temp=j-i+1;
                // if(lo!=0 and hi!=0)
            ans+=temp;}
            // cout<<i<<" "<<j<<" "<<ans<<endl;
            // cout<<endl;
            // if(i==j)j++;
            j++;
        }
        return ans;
    }
};
