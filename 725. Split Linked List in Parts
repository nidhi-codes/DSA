/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int length(ListNode* head) {
        ListNode* temp = head;
        int len = 0;
        while (temp) {
            len++;
            temp = temp->next;
        }
        return len;
    }

    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*> v(k, nullptr);
        ListNode* temp = head;
        int len = length(temp);

        int partSize = len / k;
        int remainingNodes = len % k;

        for (int i = 0; i < k && temp; i++) {
            v[i] = temp;

            int currentPartSize = partSize;
            if(remainingNodes>0){
                currentPartSize++;
                remainingNodes--;
            }
            
            for (int j = 1; j < currentPartSize; j++) {
                temp = temp->next;
            }

            ListNode* next = temp->next;
            temp->next = nullptr;
            temp = next;
        }
        return v;
    }
};
