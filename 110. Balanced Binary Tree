/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    pair<bool, int> balanced_height(TreeNode* root){
        
        if(root == NULL){
            return {true, 0};
        }
        
        pair<bool, int> left = balanced_height(root->left);
        pair<bool, int> right = balanced_height(root->right);
        
        bool left_balanced = left.first;
        bool right_balanced = right.first;
        bool left_right_height = abs(left.second-right.second) <= 1;
        
        pair<bool, int> ans;
        if(left_balanced && right_balanced && left_right_height){
            ans.first = true;
        }
        
        else{
            ans.first = false;
        }
        
        ans.second = max(left.second, right.second) + 1;
        
        return ans;
    }

    bool isBalanced(TreeNode* root) {

        pair<bool, int> ans = balanced_height(root);
        
        return ans.first;   
    }
};
