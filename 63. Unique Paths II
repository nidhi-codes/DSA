class Solution {
public:

    int solve(int i, int j, int m, int n, vector<vector<int>>& dp, vector<vector<int>>& arr){
        
        if(i>=m || j>=n){
            return 0;
        }

        if(i == m-1 && j == n-1){
            return 1;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        if(arr[i][j] == 1){
            return 0;
        }

        int same_i = solve(i, j+1, m, n, dp, arr);
        int same_j = solve(i+1, j, m, n, dp, arr);

        dp[i][j] = same_i+same_j;
        return dp[i][j];
    }

    int uniquePathsWithObstacles(vector<vector<int>>& arr) {

        int m = arr.size();
        int n = arr[0].size();

        if(arr[m-1][n-1] == 1 || arr[0][0] == 1){
            return 0;
        }
        
        vector<vector<int>> dp(m+1, vector<int>(n+1, -1));
        return solve(0, 0, m, n, dp, arr);
    }
};
