class Solution {
public:

    int dfs(vector<vector<int>>& matrix, int i, int j, int r, int c, vector<vector<int>>& memo){

        if(i == r){
            return 0;
        }

        if(j<0 || j>=c){
            return INT_MAX;
        }

        if(memo[i][j] != INT_MAX){
            return memo[i][j];
        }
        
        int curr = matrix[i][j];
        int leftDown = dfs(matrix, i+1, j-1, r, c, memo);
        int down = dfs(matrix, i+1, j, r, c, memo);
        int rightDown = dfs(matrix, i+1, j+1, r, c, memo);

        memo[i][j] = curr + min(leftDown, min(down, rightDown));

        return memo[i][j];

    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int r = matrix.size();
        int c = matrix[0].size();

        vector<vector<int>> memo(r, vector<int>(c, INT_MAX));
        int ans = INT_MAX;

        for(int j=0; j<c; j++){
            ans = min(ans, dfs(matrix, 0, j, r, c, memo));
        }
        return ans; 
    }
};
