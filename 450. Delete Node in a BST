/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int x) {
        
        if(root == NULL){
            return root;
        }
        

        // Search for the node to be deleted
        if(root->val > x){
            root->left = deleteNode(root->left, x);
        } 
        
        else if(root->val < x){
            root->right = deleteNode(root->right, x);
        }
        
        else{ 
            
            // Node found, need to delete it
            // Case 1: No child or only one child
            if(root->left == NULL){
                TreeNode *temp = root->right;
                delete root;
                return temp;
            } 
            
            else if(root->right == NULL){
                TreeNode *temp = root->left;
                delete root;
                return temp;
            }


            // Case 2: Node with two children
            // Find the inorder successor (smallest node in the right subtree)
            TreeNode *succ = root->right;
            while(succ->left != NULL){
                succ = succ->left;
            }

            // Copy the inorder successor's data to this node
            root->val = succ->val;

            // Delete the inorder successor
            root->right = deleteNode(root->right, succ->val);
        }
        
        return root;

    }
};
