class Solution {
public:

    bool isSafe(int row, int col, vector<vector<char>>& grid, char val){
        for(int i=0; i<9; i++){
            //row
            if(grid[row][i] == val){
                return false;
            }
            
            //col
            if(grid[i][col] == val){
                return false;
            }
            
            //3*3
            if(grid[3*(row/3) + i/3][3*(col/3) + i%3] == val){
                return false;
            }
        }
       return true; 
    }

    bool solveSudokuHepler(vector<vector<char>>& grid) {
        for(int i=0; i<9; i++){
            for(int j=0; j<9; j++){
                
                if(grid[i][j] == '.'){
                    for(char val='1'; val<='9'; val++){
                        if(isSafe(i, j, grid, val)){
                            grid[i][j] = val;
                            
                            bool recursive = solveSudokuHepler(grid);
                            if(recursive){
                                return true;
                            }
                            else{
                                grid[i][j] = '.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    void solveSudoku(vector<vector<char>>& grid){
        bool ans = solveSudokuHepler(grid);

    }
};
