class Solution {
public:
    vector<int> generatePrimes(int n){
        vector<bool> isPrime(n + 1, true);  // Initialize all numbers as prime
        vector<int> primes;  // Store prime numbers
    
        // 0 and 1 are not prime
        isPrime[0] = false;
        isPrime[1] = false;

        // Sieve of Eratosthenes algorithm
        for(int i = 2; i * i <= n; i++){
            if(isPrime[i]){
                for(int j = i * i; j <= n; j += i){
                    isPrime[j] = false;
                }
            }
        }

        // Collect prime numbers
        for(int i = 2; i <= n; i++){
            if(isPrime[i]){
                primes.push_back(i);
            }
        }
        return primes;
    }
    
    vector<vector<int>> findPrimePairs(int n){
        vector<vector<int>> pairs;
        vector<int> primes = generatePrimes(n);
        int size = primes.size();
        int i = 0;
        int j = size - 1;

        while(i <= j){
            int sum = primes[i] + primes[j];
            if(sum == n){
                pairs.push_back({primes[i], primes[j]});
                i++;
                j--;
            } 
            else if(sum < n){
                i++;
            }
            else{
                j--;
            }
        }
        return pairs;
    }
};
