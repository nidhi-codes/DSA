class Solution {

public:

    int recursion(vector<vector<int>>& grid, int i, int j, int row, int col){

        if(i >= row || j >= col || i<0 || j<0 || grid[i][j] == 0){
            return 0;
        }

        int ans = 0;

        int temp = grid[i][j];
        grid[i][j] = 0;

        
        ans = max(ans, recursion(grid, i, j+1, row, col));
        ans = max(ans, recursion(grid, i, j-1, row, col));
        ans = max(ans, recursion(grid, i+1, j, row, col));
        ans = max(ans, recursion(grid, i-1, j, row, col));

        grid[i][j] = temp;
        ans += temp;

        return ans;
    }
    int getMaximumGold(vector<vector<int>>& grid) {
        
        int row=grid.size();
        int col=grid[0].size();
        int ans = 0;

        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                ans = max(ans, recursion(grid, i, j, row, col));
            }
        }

        return ans;
    }
};
