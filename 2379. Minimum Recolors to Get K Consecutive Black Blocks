class Solution {
public:
    int minimumRecolors(string blocks, int k) {
        int n = blocks.length();
        int min_ops = INT_MAX;  

        // Count the initial number of black blocks within the first k blocks
        int initial_black_count = count(blocks.begin(), blocks.begin() + k, 'B');
    
        // Slide the window through the string
        for (int i = 0; i <= n - k; ++i) {
            if (i > 0) {
            // Update the black count by adding the last block and subtracting the   first block in the window
                if (blocks[i - 1] == 'B') {
                    initial_black_count -= 1;
                }
                if (blocks[i + k - 1] == 'B') {
                    initial_black_count += 1;
                }
            }
        
            // Calculate the number of operations needed to make the current k blocks consecutive black
            int ops_needed = k - initial_black_count;
        
            // Update the minimum operations if needed
            min_ops = min(min_ops, ops_needed);
        }
    
        return min_ops;
    }
};
