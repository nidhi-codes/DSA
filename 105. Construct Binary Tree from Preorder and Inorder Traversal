/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* recursion(vector<int> in, vector<int> pre, int& preIndex, int inStart, int inEnd, int n){
        
        if(preIndex >= n || inStart > inEnd){
            return NULL;
        }
        
        int node = pre[preIndex++];
        TreeNode* temp = new TreeNode(node);
        
        int pos = -1;
        
        for(int i=inStart; i<n; i++){
            
            if(node == in[i]){
                pos = i;
                break;
            }
        }
        
        temp->left = recursion(in, pre, preIndex, inStart, pos-1, n);
        temp->right = recursion(in, pre, preIndex, pos+1, inEnd, n);
        
        return temp;
        
    }

    TreeNode* buildTree(vector<int>& pre, vector<int>& in) {

        int n = pre.size();
        int preIndex = 0;
        int inStart = 0;
        int inEnd = n-1;
        
        TreeNode* ans = recursion(in, pre, preIndex, inStart, inEnd, n);
        return ans;   
    }
};
