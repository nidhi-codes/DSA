class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {

        vector<vector<pair<int, int>>>adj(n);
        
        for(int i=0; i<flights.size(); i++){
            adj[flights[i][0]].push_back({flights[i][1], flights[i][2]});
        }
        
        vector<int>dist(n, 1e9);
        
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>>pq;
        
        pq.push({0,{0,src}});
        dist[src] = 0;
        
        while(!pq.empty()){
            int stop = pq.top().first;
            int dis = pq.top().second.first;
            int node = pq.top().second.second;
            pq.pop();
            
            for(auto i : adj[node]){
                
                int adjNode = i.first;
                int weight = dis + i.second;
                
                if(weight < dist[adjNode] && stop+1 <= K+1){
                    dist[adjNode] = weight;
                    pq.push({stop+1, {weight, adjNode}});
                }
            }
        }
        
        if(dist[dst] == 1e9) return -1;
        return dist[dst];
    }
};
