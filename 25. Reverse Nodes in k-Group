/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {

private: 
    int length(ListNode* head){

        int len = 0;

        while(head){
            len++;
            head = head->next;
        }

        return len;
    }

public:
    ListNode* reverseKGroup(ListNode* head, int k) {

        int len = length(head);
        if(len<k){
            return head;
        }

        ListNode* forward = NULL;
        ListNode* prev = NULL;
        ListNode* curr = head;
        int count = 0;

        while(curr != NULL && count<k){
            forward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forward;
            count++;
        }

        if(curr != NULL){
            head->next = reverseKGroup(curr, k);
        }

        return prev;

    }
};
