class Solution {
public:
    bool dfs(vector<vector<int>>& adj, vector<int>& vis, vector<int>& path, vector<int>& check, int node){
        
        vis[node] = 1;
        path[node] = 1;
        
        for(auto i : adj[node]){
            
            if(!vis[i]){
                if(dfs(adj, vis, path,check, i) == true){
                    return true;
                }
            }
            
            if(path[i]){
                return true;
            }
        }
        
        check[node] = 1;
        path[node] = 0;
        return false;
    }
    vector<int> eventualSafeNodes(vector<vector<int>>& adj) {
        int V = adj.size();
        vector<int>safe;
        vector<int>check(V, 0);
        vector<int>vis(V, 0);
        vector<int>path(V, 0);
        
        for(int i=0; i<V; i++){
            if(!vis[i]){
                dfs(adj, vis, path,check, i);
            }
        }

        for(int i=0; i<V; i++){
            if(check[i]){
                safe.push_back(i);
            }
        }
        
        return safe;
    }
};
