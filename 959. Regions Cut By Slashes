class Solution {
public:
    vector<int>rowChange = {-1, 0, 1, 0};
    vector<int>colChange = {0, 1, 0, -1};

    void dfs(vector<vector<int>>& grid, int i, int j, int row, int col){

        if(i<0 || j<0 || i>row-1 || j>col-1 || grid[i][j] == 1){
            return;
        }
        
        grid[i][j] = 1;

        for(int in=0; in<4; in++){
            int r = i+rowChange[in];
            int c = j+colChange[in];
            dfs(grid, r, c, row, col);
        }
    }
    
    int regionsBySlashes(vector<string>& mat) {
        
        int n = mat.size();
        int m = mat[0].size();

        int count = 0;

        vector<vector<int>> grid(n*3, vector<int>(m*3, 0));
        int row = 0;
        int col = 0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(mat[i][j] == ' '){
                    // row += 3;
                    col += 3;
                    continue;
                }
                else if(mat[i][j] == '/'){
                    grid[row][col+2] = grid[row+1][col+1] = grid[row+2][col] = 1;
                    col += 3;
                }
                else{
                    grid[row][col] = grid[row+1][col+1] = grid[row+2][col+2] = 1;
                    col += 3;
                }
            }
            row += 3;
            col = 0;
        }

        for(int i=0; i<n*3; i++){
            for(int j=0; j<m*3; j++){
                if(grid[i][j] == 0){
                    count++;
                    dfs(grid, i, j, n*3, m*3);
                }
            }
        }

        return count;
    }
};
