/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* middleNode(ListNode* head){

        ListNode* slow = head;
        ListNode* fast = head->next;

        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }

        return slow;

    }

    ListNode* merge(ListNode* left, ListNode* right){

        if(left == NULL){
            return right;
        }

        if(right == NULL){
            return left;
        }

        ListNode* dummy = new ListNode(0);
        ListNode* temp = dummy;

        while(left && right){
            if(left->val < right->val){
                temp->next = left;
                temp = left;
                left = left->next;
            }
            
            else{
                temp->next = right;
                temp = right;
                right = right->next;
            }
        }

        while(left){
            temp->next = left;
            temp = left;
            left = left->next;
        }

        while(right){
            temp->next = right;
            temp = right;
            right = right->next;
        }

        return dummy->next;

    }

    ListNode* mergeSort(ListNode* head){

        if(head == NULL || head->next == NULL){
            return head;
        }

        ListNode* mid = middleNode(head);
        ListNode* left = head;
        ListNode* right = mid->next;
        mid->next = NULL;

        left = mergeSort(left);
        right = mergeSort(right);

        ListNode* ans = merge(left, right);

        return ans;

    }

    ListNode* sortList(ListNode* head) {
        
        return mergeSort(head);
    }
};
