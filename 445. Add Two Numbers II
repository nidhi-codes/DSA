/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    // Function to reverse a linked list
    ListNode* Reverse(ListNode* head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* next = NULL;

        while(curr){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    // Function to add two numbers represented by linked lists
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2){
        ListNode* temp1 = Reverse(l1);
        ListNode* temp2 = Reverse(l2);

        ListNode* head = NULL;
        ListNode* curr = NULL;
        int carry = 0;        
        while(temp1 || temp2 || carry){
            int sum = carry;
            if(temp1){
                sum += temp1->val;
                temp1 = temp1->next;
            }
            if(temp2){
                sum += temp2->val;
                temp2 = temp2->next;
            }

            int ans = sum%10;
            carry = sum/10;
            
            ListNode* newNode = new ListNode(ans);
            if(head == NULL) {
                head = newNode;
                curr = newNode;
            } 
            else{
                curr->next = newNode;
                curr = newNode;
            }
           
        }

        // Reverse the linked list to get the correct order
        return Reverse(head);
    }
};
