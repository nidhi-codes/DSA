class Solution {
public:

    int firstPosition(vector<int>& nums, int target){
        int len = nums.size();
        int start = 0;
        int end = len-1;
        int mid;
        int first = -1;

        while(start<=end){
            mid = start + (end-start)/2;

            if(nums[mid] == target){
                first = mid;
                end = mid-1;
            }
            else if(nums[mid]>target){
                end = mid-1;
            }
            else{
                start = mid+1;
            }
        }

        return first;
    }

    int lastPosition(vector<int>& nums, int target){
        int len = nums.size();
        int start = 0;
        int end = len-1;
        int mid;
        int last = -1;

        while(start<=end){
            mid = start + (end-start)/2;

            if(nums[mid] == target){
                last = mid;
                start = mid+1;
            }
            else if(nums[mid]>target){
                end = mid-1;
            }
            else{
                start = mid+1;
            }
        }

        return last;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans(2);
        ans[0] = firstPosition(nums, target);
        ans[1] = lastPosition(nums, target);

        return ans;
           
    }
};
