class Solution {
public:

    void addAns(vector<vector<int>>& board, vector<vector<string>>& ans, int n){
        
        vector<string> res;
        for(int i=0; i<n; i++){
            string temp = "";
            for(int j=0; j<n; j++){
                if(board[i][j] == 1){
                    temp += 'Q';
                }
                else{
                    temp += '.';
                }
            }
            res.push_back(temp);
        }
        
        ans.push_back(res);
        return;
    }
    
    bool pathExist(int row, int col, vector<vector<int>>& board, int n){
        
        //upper diagonal
        for(int i=row-1, j=col-1; i>=0 && j>=0; i--, j--){
            if(board[i][j] == 1){
                return false;
            }
        }
        
        //row
        for(int i=col-1; i>=0; i--){
            if(board[row][i] == 1){
                return false;
            }
        }
        
        //lower diagonal
        for(int i=row+1, j=col-1; i<n && j>=0; i++, j--){
            if(board[i][j] == 1){
                return false;
            }
        }
        
        return true;
    }

    void solve(vector<vector<int>>& board, vector<vector<string>>& ans, int n, int col){
        if(col == n){
            addAns(board, ans, n);
            return;
        }
        
        for(int i=0; i<n; i++){
            if(pathExist(i, col, board, n)){
                board[i][col] = 1;
                solve(board, ans, n, col+1);
                board[i][col] = 0;
            }
        }
        
        return;
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<int>> board(n, vector<int>(n,0));
        vector<vector<string>> ans;
        
        
        int col = 0;
        solve(board, ans, n, col);  //column wise solution
        return ans;
    }
};
