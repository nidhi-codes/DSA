/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    pair<int, int> diameter_height(TreeNode* root){
        
        if(root == NULL){
            return {0,0};
        }
        
        pair<int, int> left = diameter_height(root->left);
        pair<int, int> right = diameter_height(root->right);
        
        int left_diameter = left.first;
        int right_diameter = right.first;
        int left_right_height = left.second + right.second;
        
        pair<int, int> ans;
        ans.first  = max({left_diameter, right_diameter, left_right_height});
        ans.second = max(left.second, right.second)+1;
        
        return ans;
        
    }

    int diameterOfBinaryTree(TreeNode* root) {
        
        pair<int, int> ans = diameter_height(root);
        
        return ans.first;

    }
};
